# Use phusion/baseimage as base image. To make your builds
# reproducible, make sure you lock down to a specific version, not
# to `latest`! See
# https://github.com/phusion/baseimage-docker/blob/master/Changelog.md
# for a list of version numbers.
#
#  FROM phusion/baseimage:<VERSION>

FROM phusion/baseimage:0.9.17
#ENTRYPOINT /bin/bash

# ...put your own build instructions here...

###apt-get autoremove

################################################
###                                          ###
### If you want to upgrade to 16.04          ###
### Please execute:                          ###
###                                          ###
###   apt-get dist-upgrade                   ###
###   apt-get install update-manager-core    ###
###   do-release-upgrade -d                  ###
###                                          ###
################################################


ENV DEBIAN_FRONTEND noninteractive 

ADD ./addfiles /addfiles

#ADD ./addfiles/gnu/libgmp.so.10 \
#	./addfiles/gnu/libcurl-gnutls.so.4 \    
#	./addfiles/gnu/librtmp.so.1 \    
#	./addfiles/gnu/libssh2.so.1 \           
#	./addfiles/gnu/libnettle.so.4 \           
#	./addfiles/gnu/libgnutls-deb0.so.28 \     
#	./addfiles/gnu/libhogweed.so.2 \         
#	./addfiles/gnu/libcap-ng.so.0		/usr/lib/x86_64-linux-gnu/

RUN mkdir -p /addfiles; \
	mkdir -p /root/Downloads; \
	mkdir -p /root/Sources; \
	mkdir -p /etc/my_init.d; \
        mkdir -p /docker_scripts; \
	sed -i.bak -e s/USA/USA\\\nexit\ 0\\\n/g   /usr/sbin/invoke-rc.d; \
	sed -i.bak -e s/exit\ 101/exit\ 0/g /usr/sbin/policy-rc.d; \
	apt-get -y update; \
	apt-get -y install apt-transport-https dbus binfmt-support llvm udev binutils libgmp-dev || true; \
        sed -i.bak -e s/BEGIN\ INIT\ INFO/BEGIN\ INIT\ INFO\\\nexit\ 0\\\n/g  /etc/init.d/udev; \
	ls -l /usr/lib/apt/methods/https; \
	cp /usr/lib/apt/methods/https /root/Downloads/https; \
 	ln -snf /root/Downloads/https /usr/lib/apt/methods/https; \
	ln -snf /bin/bash /bin/sh; \

	rm /etc/rc.local; \
        apt-get -y purge \
                libcurl3 \
                libcurl3-gnutls; \
	cp /addfiles/rc.local 			/etc/rc.local; \
	cp /addfiles/docker.list 		/etc/apt/sources.list.d/; \
	cp /addfiles/sources.list 		/etc/apt/; \
	cp /addfiles/libsystemd.so.0 		/lib/x86_64-linux-gnu/libsystemd.so.0; \
	cp /addfiles/libgcrypt.so.20 		/lib/x86_64-linux-gnu/libgcrypt.so.20; \
	cp /addfiles/timedatectl              	/usr/bin/; \
	cp /addfiles/dbus*			/usr/bin/; \
	cp /addfiles/110_logtime.sh 		/etc/my_init.d/110_logtime.sh; \
	cp /addfiles/120_dbus.sh.old 		/docker_scripts/120_dbus.sh; \
	cp /addfiles/130_ha.sh 			/docker_scripts/130_ha.sh; \
	#cp /addfiles/packages 			/root/Downloads/ -rf; \
	cp /addfiles/gnu/libgmp.so.10 		/usr/lib/x86_64-linux-gnu/; \
	cp /addfiles/gnu/libcurl-gnutls.so.4    /usr/lib/x86_64-linux-gnu/; \  
	cp /addfiles/gnu/librtmp.so.1    	/usr/lib/x86_64-linux-gnu/; \ 
	cp /addfiles/gnu/libssh2.so.1           /usr/lib/x86_64-linux-gnu/; \  
	cp /addfiles/gnu/libnettle.so.4         /usr/lib/x86_64-linux-gnu/; \    
	cp /addfiles/gnu/libgnutls-deb0.so.28   /usr/lib/x86_64-linux-gnu/; \    
	cp /addfiles/gnu/libhogweed.so.2        /usr/lib/x86_64-linux-gnu/; \   
	cp /addfiles/gnu/libcap-ng.so.0		/usr/lib/x86_64-linux-gnu/; \
	touch /etc/init.d/cgroup-lite; \
	echo "#!/bin/bash" >> /etc/init.d/cgroup-lite; \
	echo "exit 0" >> /etc/init.d/cgroup-lite; \
	chmod +x /etc/init.d/cgroup-lite; \
	echo "#!/bin/bash" >> /etc/init.d/vsftpd; \
        echo "exit 0" >> /etc/init.d/vsftpd; \
        chmod +x /etc/init.d/vsftpd; 


RUN	dpkg -i /addfiles/packages/cgroup-lite_1.10_all.deb; \
	sed -i.bak -e s/exit\ 101/exit\ 0/g /usr/sbin/policy-rc.d; \
	ln -s /bin/true /etc/init.d/systemd-logind; \
 	ln -snf /root/Downloads/https /usr/lib/apt/methods/https; \
        apt-get purge openjdk-7-*; \
        apt-get purge openjdk-8-*; \
	echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections; \
        echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections; \
        apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D; \
	echo "deb http://download.mono-project.com/repo/debian wheezy main" | tee /etc/apt/sources.list.d/mono-xamarin.list; \
	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A6A19B38D3D831EF; \
	rm /var/lib/apt/lists/* -vrf; \
	#apt-get -y update

	bash -c "if [ -e /var/run/dbus/system_bus_socket ]; then rm /var/run/dbus/system_bus_socket; fi"; \
        bash /docker_scripts/120_dbus.sh; \
        service dbus status; \
        /usr/bin/timedatectl set-timezone  Asia/Taipei; \
        #service dbus stop; \
	cat /dev/null > /var/run/utmp; \

        dpkg --configure -a; \
	bash -c "if [ ! -e /usr/lib/apt/methods/https ]; then ln -snf /root/Downloads/https /usr/lib/apt/methods/https; fi"; \
	bash -c "if [ -e /usr/lib/x86_64-linux-gnu/libgmp.so.10.1.3 ]; then ln -snf /usr/lib/x86_64-linux-gnu/libgmp.so.10.1.3 /usr/lib/x86_64-linux-gnu/libgmp.so.10; fi"; \

        apt-get -y update; \
        apt-get -y --force-yes upgrade; \

        apt-get -y install \
                ant ant-optional asciidoc autoconf automake autopoint autotools-dev \
                bison build-essential bzip2 \
                ccache \
		#cluster-glue 
		cmake \
		#corosync-dev 
		cvs; \

	#cd /root/Downloads; \
	#dpkg -i /addfiles/packages/cgroup-lite_1.9_all.deb; \


	apt-get -y install \
        	dbtoepub dbus docbook docbook-dsssl docbook-dsssl-doc docbook-xml docbook-xsl \
		#docker.io \
		dsniff \
        	flex \
        	g++ gcc gdb gettext git git-arch git-completion git-core git-doc git-email git-svn \
        	intltool \
        	jade; \
	apt-get -y install \
        	kernel-package \
        	libaio1 libaio-dev libboost-all-dev libbz2-dev libc++1 libc++abi1 libc++abi-dev libc++abi-test \
                	libc++-dev libc++-helpers libc++-test libc6 libc6-dbg \
			#libcluster-glue-dev 
			libcurl4-gnutls-dev \
                	#libcurl4-openssl-dev 
			libdbus-1-dev libdbus-glib-1-dev libesmtp-dev libgdbm-dev \
                	libglib2.0-dev libncurses5-dev libpam0g-dev libpe-status4 libpod-2-docbook-perl\ 
			#libqb-dev \
                	libreadline-dev libselinux-dev libsgml-dtdparse-perl libsnmp-base libsnmp-dev libsqlite3-dev \
                	libssl-dev libtool libxml2-dev libxml2-utils libxslt1-dev lm-sensors \
			lsof; \
	apt-get -y install \
        	#monodevelop 
		mono-devel mono-complete multiarch-support \
        	ncurses-dev ntp \
		openjade1.3 opensp \
		#oracle-java7-installer oracle-java8-installer \
        	p7zip p7zip-full pbzip2 pkg-config publican python-lxml \
		referenceassemblies-pcl \
		sshpass; \
	#apt-get -y install \
	#libsystemd-dev 
	#libtool; \

	apt-get -y install \
        	python-software-properties python-pip python-dev python-pip python-dev \
        	python3 python3-software-properties python-httplib2 python-setuptools \
        	python3-dev python-lxml; \
		#python3-systemd; \

	apt-get -y install libmysqlclient-dev libmysql++6 libmysql++-dev libdbd-mysql-perl mysql-client; \
	apt-get -y install vsftpd; \
	apt-get -y install wget; \
	pip install requests[security]; \
	pip install pyopenssl ndg-httpsclient pyasn1; \
	wget "https://raw.github.com/pypa/pip/master/contrib/get-pip.py"; \
	wget https://bootstrap.pypa.io/ez_setup.py -O - | python; \
	python get-pip.py; \
        pip uninstall -y distribute || true; \
        pip uninstall -y setuptools || true; \
        pip install ipython; \
        pip install --upgrade ipython; 

RUN	mkdir -p /var/run/vsftpd/empty; \
	# NEED TO ADD VSFTPD root permission and ENABLE WRITE
	sed -i.bak -e s/root/#root/g /etc/ftpusers; \
	sed -i.bak -e s/#write_enable/write_enable/g /etc/vsftpd.conf; \
	cd /addfiles/packages; \
	wget "http://launchpadlibrarian.net/173841617/init-system-helpers_1.18_all.deb"; \
        dpkg -i init-system-helpers_1.18_all.deb; \

	#WORKDIR /usr/lib/x86_64-linux-gnu/
	cd /usr/lib/x86_64-linux-gnu/; \
	ln -sf ./libmysqlclient.so libmysqlclient_r.so; \
        ln -sf ./libmysqlclient.so.18 libmysqlclient_r.so.18; \

	update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 10; \
	update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 10; \
	update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30; \
	update-alternatives --set cc /usr/bin/gcc; \
	update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30; \
	update-alternatives --set c++ /usr/bin/g++; \
	update-alternatives --config gcc; \
	update-alternatives --config g++; \
	mkdir -p /root/Downloads/pgxl; \
	mkdir -p /root/Downloads/pgxl95; \
	mkdir -p /root/Downloads/vdb; \

	#WORKDIR /root/Downloads/pgxl
	cd /root/Downloads/pgxl; \
	wget "http://sourceforge.net/projects/postgres-xl/files/Releases/Version_9.2rc/postgres-xl-v9.2-src.tar.gz"; \
	tar zxvf postgres-xl-v9.2-src.tar.gz; \
	cd postgres-xl/; \
	export OSX=/usr/bin/osx; \
        ./configure --with-python; \
	make -j8; \

	#ADD ./stormstats.c /root/Downloads/pgxl95/stormstats.c
	cp /addfiles/stormstats.c /root/Downloads/pgxl95/stormstats.c; \

	#WORKDIR /root/Downloads/pgxl95
	cd /root/Downloads/pgxl95; \
	git clone git://git.postgresql.org/git/postgres-xl.git; \
	cp /root/Downloads/pgxl95/stormstats.c /root/Downloads/pgxl95/postgres-xl/contrib/stormstats/; \

	#WORKDIR /root/Downloads/pgxl95/postgres-xl/
	cd /root/Downloads/pgxl95/postgres-xl/; \

	ln -s /usr/bin/make /usr/bin/gmake; \
	export OSX=/usr/bin/osx; \
	./configure --with-python; \
	gmake world -j8; \

	#apt-get -y install monodevelop; \
	mkdir -p /root/Downloads/fs; \
	mkdir -p /root/Downloads/corosync; \
	mkdir -p /root/Downloads/cluster-glue; \
	mkdir -p /root/Downloads/clusterLab/libqb; \
	mkdir -p /root/Downloads/clusterLab/corosync; \
	mkdir -p /root/Downloads/clusterLab/cluster-glue; \
	mkdir -p /root/Downloads/clusterLab/resource-agents; \
	mkdir -p /root/Downloads/clusterLab/pacemaker; \
	mkdir -p /root/Downloads/clusterLab/crmsh; \
	mkdir -p /root/Downloads/clusterLab/pcs; \
	mkdir -p /root/Downloads/clusterLab/fence-agents; \
	mkdir -p /root/Downloads/clusterLab/hawk; \
	mozroots --import --sync; \

	#WORKDIR /root/Downloads/fs
	cd /root/Downloads/fs; \
	pwd; \
	rm fsharp -f; \
	git clone https://github.com/fsharp/fsharp.git; \
	cd fsharp; \
	mkdir -p .paket; \
	
#ADD ./paket.bootstrapper.exe /root/Downloads/fs/fsharp/.paket/paket.bootstrapper.exe
#ADD ./paket.dependencies /root/Downloads/fs/fsharp/paket.dependencies
	cp /addfiles/paket.bootstrapper.exe /root/Downloads/fs/fsharp/.paket/paket.bootstrapper.exe; \
	cp /addfiles/paket.dependencies /root/Downloads/fs/fsharp/paket.dependencies; \

	#WORKDIR /root/Downloads/fs/fsharp/.paket/
	cd /root/Downloads/fs/fsharp/.paket/; \
	mono paket.bootstrapper.exe; \
	mono paket.exe update; \

	#WORKDIR /root/Downloads/fs/fsharp/
	cd /root/Downloads/fs/fsharp/; \
	./autogen.sh --prefix=/usr; \
        make; \
	cd ../; \
	#wget "https://raw.github.com/fsharp/FAKE/master/src/app/FakeLib/ProcessHelper.fs"; \

#	echo "none  /proc/sys/fs/binfmt_misc binfmt_misc defaults 0 0" >> /etc/fstab; \
#	chmod +x /root/Downloads/fs/fsharp/src/fsharp/fsi/obj/release/fsi.exe

#RUN mkdir /etc/service/dbus
#ADD 120_dbus.sh /etc/service/dbus/run
#RUN chmod +x /etc/service/dbus/run; \
#	chmod +x /docker_scripts/120_dbus.sh
#RUN chmod +x /docker_scripts/120_dbus.sh

#RUN service stop dbus || true; \
#	if [ -e /var/run/dbus/system_bus_socket ]; then \
#		rm /var/run/dbus/system_bus_socket; \
#	fi
#RUN /docker_scripts/120_dbus.sh start; \
#RUN service dbus status; \
#
#RUN	/usr/bin/timedatectl set-timezone  Asia/Taipei 
#RUN /docker_scripts/120_dbus.sh stop || true; \
#	if [ -e /var/run/dbus/system_bus_socket ]; then \
#		rm /var/run/dbus/system_bus_socket; \
#	fi

#RUN apt-get -y install g++-5

	cd /root/Downloads/clusterLab/; \
	#git clone https://github.com/ingted/clusterLab.git; \
	
	


	apt-get -y install software-properties-common libnss3-dev groff mercurial uuid-dev snmpd \
		#pacemaker-mgmt cluster-glue-dev 
		rpm python-suds \
		#pacemaker-dev 
		libreadline-gplv2-dev graphviz libgraphviz-dev ttf-dejavu fonts-dejavu ruby-dev; \
	apt full-upgrade mono-complete; \
	cat > /etc/apt/sources.list.d/webupd8team-java.list << EOF \
		deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main \
		deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main \
	EOF; \
	add-apt-repository -y ppa:webupd8team/java; \
	apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886; \
	apt-get update; \
	apt-get -y install oracle-java8-installer oracle-java7-installer vim; \
	useradd --system -U -ms /bin/bash postgres; \
	useradd --system -U -ms /bin/bash osdba; \
	useradd --system -U -ms /bin/bash voltdb; \
	sed -i.bak -e s/postgres\:\!/postgres\:\$6\$H1W8BGOe\$zue0LuGmqohKdjJiF1GCKD7r3XuJWniuqXfavfoLSUmH9FdkGZi9maI597swe0AkiMJuoxLO9PbuwH8Le6aEq1/g /etc/shadow; \
	sed -i.bak -e s/osdba\:\!/osdba\:\$6\$H1W8BGOe\$zue0LuGmqohKdjJiF1GCKD7r3XuJWniuqXfavfoLSUmH9FdkGZi9maI597swe0AkiMJuoxLO9PbuwH8Le6aEq1/g /etc/shadow; \ 
	sed -i.bak -e s/voltdb\:\!/voltdb\:\$6\$H1W8BGOe\$zue0LuGmqohKdjJiF1GCKD7r3XuJWniuqXfavfoLSUmH9FdkGZi9maI597swe0AkiMJuoxLO9PbuwH8Le6aEq1/g /etc/shadow; \
	useradd --system -U -ms /bin/bash haclient; \
	useradd --system -m -g haclient -s /bin/bash hacluster; \
	sed -i.bak -e s/haclient\:\!/haclient\:\$6\$H1W8BGOe\$zue0LuGmqohKdjJiF1GCKD7r3XuJWniuqXfavfoLSUmH9FdkGZi9maI597swe0AkiMJuoxLO9PbuwH8Le6aEq1/g /etc/shadow; \
	sed -i.bak -e s/hacluster\:\!/hacluster\:\$6\$H1W8BGOe\$zue0LuGmqohKdjJiF1GCKD7r3XuJWniuqXfavfoLSUmH9FdkGZi9maI597swe0AkiMJuoxLO9PbuwH8Le6aEq1/g /etc/shadow; 


	#WORKDIR /root/Downloads/clusterLab/libqb
RUN cd /root/Downloads/clusterLab/libqb; \
	#git clone https://github.com/ClusterLabs/libqb.git; \
	git clone https://github.com/ingted/libqb.git; \
	wget "https://github.com/ClusterLabs/libqb/archive/v0.17.2.tar.gz"; \
	#tar xpvf ./v0.17.2.tar.gz; \
	#cd libqb-0.17.2; \

	#./autogen.sh; \
	#./configure; \
	#make -j8; \

	cd /root/Downloads/clusterLab/libqb/libqb; \
        ./autogen.sh; \
        ./configure; \
        make -j8; \
	make install; \

	#ADD ./bashrc_4_xl /root/Downloads/pgxl95/bashrc_4_xl
	cp /addfiles/bashrc_4_xl /root/Downloads/pgxl95/bashrc_4_xl; \
	cat /root/Downloads/pgxl95/bashrc_4_xl >> ~/.bashrc; \
	mkdir -p /root/Downloads/clusterLab/corosync; \

	#WORKDIR /root/Downloads/clusterLab/corosync
	cd /root/Downloads/clusterLab/corosync; \
	#git clone https://github.com/ClusterLabs/corosync.git; \
	git clone https://github.com/ingted/corosync.git; \

	cd /root/Downloads/corosync; \
	git clone https://github.com/corosync/corosync.git; \
	wget "https://github.com/corosync/corosync/archive/v2.3.5.tar.gz"; \

	#tar zxvf ./v2.3.5.tar.gz; \
	#cd corosync-2.3.5; \

	cd /root/Downloads/clusterLab/corosync/corosync; \
	./autogen.sh; \
	./configure; \
	make -j8 ; \
	make install; \

	#WORKDIR /root/Downloads/clusterLab/cluster-glue
	cd /root/Downloads/clusterLab/cluster-glue; \
	git clone https://github.com/ingted/cluster-glue.git; \

	#apt-get -y install mercurial uuid-dev; \
	cd /root/Downloads/cluster-glue; \	
	hg clone http://hg.linux-ha.org/glue cluster-glue; \
	#ls -l /root/Downloads/clusterLab/cluster-glue; \
	#ls -l /root/Downloads/clusterLab; \
	cd /root/Downloads/clusterLab/cluster-glue/cluster-glue; \
	./autogen.sh; \
	./configure --enable-fatal-warmings=yes; \
	make -j8; \
	make install; \


	#apt-get -y install snmpd pacemaker-mgmt cluster-glue-dev
	 
	
	#WORKDIR /root/Downloads/clusterLab/resource-agents
	cd /root/Downloads/clusterLab/resource-agents; \
	#RUN wget "https://github.com/ClusterLabs/resource-agents/archive/v3.9.6.tar.gz"; \
	#git clone https://github.com/ClusterLabs/resource-agents.git; \
	git clone https://github.com/ingted/resource-agents.git; \
	#tar xzvf v3.9.6.tar.gz; \
	#cd resource-agents-3.9.6; \
	cd resource-agents; \
	./autogen.sh; \
	./configure; \
	make; \
	make install; \

	#WORKDIR /root/Downloads/clusterLab/crmsh
	cd /root/Downloads/clusterLab/crmsh; \
	#git clone https://github.com/ClusterLabs/crmsh.git; \
	git clone https://github.com/ingted/crmsh.git; \
	wget "https://github.com/ClusterLabs/crmsh/archive/2.1.0.tar.gz"; \
	tar zxvf 2.1.0.tar.gz; \
	cd crmsh-2.1.0; \ 
	./autogen.sh; \
	./configure; \
	make; \

	cd /root/Downloads/clusterLab/crmsh/crmsh; \
	./autogen.sh; \
	./configure; \
	make; \
	make install; \

	mkdir /var/log/pcsd; \
	mkdir /var/lib/pcsd; \
	mkdir /usr/share/pcsd; \
	chown hacluster:haclient /var/log/pcsd -R; \
	chown hacluster:haclient /var/lib/pcsd -R; \
	chown hacluster:haclient /usr/share/pcsd -R; \

	
	#WORKDIR /root/Downloads/clusterLab/pcs
	cd /root/Downloads/clusterLab/pcs; \
	git clone https://github.com/ingted/pcs.git; \
	wget "https://github.com/ClusterLabs/pcs/archive/0.9.141.tar.gz"; \
	cp /root/Downloads/clusterLab/pcs/pcs; \
	chown hacluster:haclient /pcs -R; \
	#cd /pcs;
	#tar zxvf 0.9.141.tar.gz; \
	#ls -l; \
	#ls -l pcs-0.9.141; \
	#cd pcs-0.9.141/pcsd; \
	#make get_gems; \
	#cd ..; \
	#make install (normal install)
	#make install_pcsd


	chown hacluster:haclient /root/Downloads/clusterLab/pcs -R; \

	#WORKDIR /root/Downloads/clusterLab/fence-agents
	cd /root/Downloads/clusterLab/fence-agents; \
	wget "https://github.com/ClusterLabs/fence-agents/archive/v4.0.21.tar.gz"; \
	#apt-get -y install python-suds
	tar xzvf v4.0.21.tar.gz; \
	cd fence-agents-4.0.21; \
	./autogen.sh; \
	./configure; \
	make; \
	
	#WORKDIR /root/Downloads/clusterLab/hawk
	cd /root/Downloads/clusterLab/hawk; \
	wget "https://github.com/ClusterLabs/hawk/archive/1.0.0-alpha1.tar.gz"; \
	#tar zxvf 1.0.0-alpha1.tar.gz; \
	#cd hawk-1.0.0-alpha1; \
	#apt-get -y install pacemaker-dev libreadline-gplv2-dev graphviz libgraphviz-dev ttf-dejavu fonts-dejavu


	#WORKDIR /root/Downloads/clusterLab/pacemaker
	cd /root/Downloads/clusterLab/pacemaker; \
	#git clone https://github.com/ClusterLabs/pacemaker.git; \
	wget "https://github.com/ClusterLabs/pacemaker/archive/Pacemaker-1.1.13-rc3.tar.gz"; \
	git clone https://github.com/ingted/pacemaker.git; \
	cd /root/Downloads/clusterLab/pacemaker/pacemaker; \ 
	./autogen.sh; \
	./configure; \
	make -j8; 
	


# Use baseimage-docker's init system.
CMD ["/sbin/my_init"]
