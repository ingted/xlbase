# Use phusion/baseimage as base image. To make your builds
# reproducible, make sure you lock down to a specific version, not
# to `latest`! See
# https://github.com/phusion/baseimage-docker/blob/master/Changelog.md
# for a list of version numbers.
#
#  FROM phusion/baseimage:<VERSION>

FROM phusion/baseimage:0.9.17
ENTRYPOINT /bin/bash

# Use baseimage-docker's init system.

CMD ["/sbin/my_init"]

# ...put your own build instructions here...

COPY docker.list /etc/apt/sources.list.d/

RUN mkdir -p /root/Downloads; mkdir -p /root/Sources; \
	apt-get purge openjdk-7-*; \
	apt-get purge openjdk-8-*; \
	echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections; \
	echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections; \
	apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

WORKDIR /root/Sources

RUN apt-get -y update; \
	apt-get -y upgrade

RUN apt-get -y purge \
	libcurl3 libcurl3-gnutls

RUN apt-get -y upgrade; \
	apt-get -y upgrade

RUN apt-get -y install \
	ant ant-optional asciidoc autoconf automake autopoint autotools-dev \
	bison build-essential bzip2 \
	ccache cluster-glue cmake corosync-dev cvs \
	dbtoepub dbus docbook docbook-dsssl docbook-dsssl-doc docbook-xml docbook-xsl docker.io dsniff \
	flex \
	g++-5 gdb gettext git git-arch git-completion git-core git-doc git-email git-svn \
	intltool \
	jade \
	kernel-package \
	libaio1 libaio-dev libboost-all-dev libbz2-dev libc++1 libc++abi1 libc++abi-dev libc++abi-test \
		libc++-dev libc++-helpers libc++-test libc6 libc6-dbg libcluster-glue-dev libcurl4-gnutls-dev \
		libcurl4-openssl-dev libdbus-1-dev libdbus-glib-1-dev libesmtp-dev libgdbm-dev \
		libglib2.0-dev libncurses5-dev libpam0g-dev libpe-status4 libpod-2-docbook-perl libqb-dev \
		libreadline-dev libselinux-dev libsgml-dtdparse-perl libsnmp-base libsnmp-dev libsqlite3-dev \
		libssl-dev libtool libxml2-dev libxml2-utils libxslt1-dev llvm \
	lm-sensors \
	multiarch-support \
	ncurses-dev ntp \
	openjade1.3 opensp oracle-java7-installer oracle-java8-installer \
	p7zip p7zip-full pbzip2 pkg-config publican python-lxml

RUN apt-get -y install libsystemd-dev libtool-bin

RUN apt-get -y install \
	python-software-properties python-pip python-dev python-pip python-dev \
	python3 python3-software-properties python-httplib2 python-setuptools \
	python3-dev python-lxml python3-systemd

RUN apt-get -y install libmysqlclient-dev libmysql++6 libmysql++-dev libdbd-mysql-perl mysql-client

RUN wget "https://raw.github.com/pypa/pip/master/contrib/get-pip.py"; \
	python get-pip.py; \
	pip uninstall -y distribute; \
	pip uninstall -y setuptools; \
	pip install ipython; \
	pip install --upgrade ipython


RUN wget "http://launchpadlibrarian.net/173841617/init-system-helpers_1.18_all.deb"; \
	dpkg -i init-system-helpers_1.18_all.deb

WORKDIR /usr/lib/x86_64-linux-gnu/

RUN ln -sf ./libmysqlclient.so libmysqlclient_r.so; \
	ln -sf ./libmysqlclient.so.18 libmysqlclient_r.so.18



###### Upgrading the operating system inside the container
#
#Baseimage-docker images contain an Ubuntu 14.04 operating system. 
#
#While we release Baseimage-docker images with the latest OS updates from time to time, you do not have to rely on us. 
#You can update the OS inside Baseimage-docker images yourself, and it is recommend that you do this instead of waiting for us.
#
#To upgrade the OS in the image, run this in your Dockerfile:

RUN apt-get update && apt-get upgrade -y -o Dpkg::Options::="--force-confold"






###### Adding daemons
#In Dockerfile:
#
#  RUN mkdir /etc/service/memcached
#  ADD memcached.sh /etc/service/memcached/run
#
#In memcached.sh (make sure this file is chmod +x):
#
#  !/bin/sh
#  #`/sbin/setuser memcache` runs the given command as the user `memcache`.
#  #If you omit that part, the command will be run as root.
#
#  exec /sbin/setuser memcache /usr/bin/memcached >>/var/log/memcached.log 2>&1

###### A correct init process
#/sbin/my_init that reaps orphaned child processes correctly, and responds to SIGTERM correctly.
#It runs the following scripts during startup, in the following order:
#All executable scripts in /etc/my_init.d, if this directory exists. The scripts are run in lexicographic order.
#The script /etc/rc.local, if this file exists.
#All scripts must exit correctly, e.g. with exit code 0. If any script exits with a non-zero exit code, the booting will fail.
#
#In logtime.sh (make sure this file is chmod +x):
#
#  #!/bin/sh
#  date > /tmp/boottime.txt
#
#In Dockerfile:
#
#  RUN mkdir -p /etc/my_init.d
#  ADD logtime.sh /etc/my_init.d/logtime.sh
#

###### Before any script loaded, my_init imports environment variables from the directory /etc/container_environment
#
#In Dockerfile:
#
#  RUN echo Apachai Hopachai > /etc/container_environment/MY_NAME
#
#You can verify that it works, as follows:
#
#  $ docker run -t -i <YOUR_NAME_IMAGE> /sbin/my_init -- bash -l
#  ...
#  *** Running bash -l...
#  echo $MY_NAME
#  Apachai Hopachai
#
#Handling newlines
#
#If you've looked carefully, you'll notice that the 'echo' command actually prints a newline. 
#Why does $MY_NAME not contain a newline then? 
#It's because my_init strips the trailing newline, if any. 
#If you intended on the value having a newline, you should add another newline, like this:
#
#  RUN echo -e "Apachai Hopachai\n" > /etc/container_environment/MY_NAME

###### Environment variable dumps
#
#During startup, after importing environment variables from /etc/container_environment, my_init will dump all its environment variables 
#(that is, all variables imported from container_environment, as well as all variables it picked up from docker run --env) 
#to the following locations, in the following formats:
#
#  /etc/container_environment
#  /etc/container_environment.sh - a dump of the environment variables in Bash format. You can source the file directly from a Bash shell script.
#  /etc/container_environment.json - a dump of the environment variables in JSON format.



###### Security
#
#/etc/container_environment and its Bash and JSON dumps are by default owned by root, and accessible only by the docker_env group 
#(so that any user added this group will have these variables automatically loaded).
#
#If you are sure that your environment variables don't contain sensitive data, then you can also relax the permissions on that directory and those files by making them world-readable:
#
#  RUN chmod 755 /etc/container_environment
#  RUN chmod 644 /etc/container_environment.sh /etc/container_environment.json

###### Fixes APT incompatibilities with Docker

###### syslog-ng
#It runs a syslog daemon so that important system messages don't get lost.

###### cron daemon
#It runs a cron daemon so that cronjobs work.

###### SSH server
#Allows you to easily login to your container to inspect or administer things.
#SSH is only one of the methods provided by baseimage-docker for this purpose.
#
#Baseimage-docker disables the SSH server by default. Add the following to your Dockerfile to enable it:

RUN rm -f /etc/service/sshd/down

# Regenerate SSH host keys. baseimage-docker does not contain any, so you
# have to do that yourself. You may also comment out this instruction; the
# init system will auto-generate one during boot.

RUN /etc/my_init.d/00_regen_ssh_host_keys.sh

###### About SSH keys
#
#Ensure that you have the right SSH keys installed inside the container. By default, no keys are installed, so nobody can login. 
#For convenience reasons, we provide a pregenerated, insecure key (PuTTY format) that you can easily enable. 
#However, please be aware that using this key is for convenience only. It does not provide any security because this key is publicly available
#In production environment, you should use your own keys.
#
#Using the insecure key for one container only
#
#You can temporarily enable the insecure key for one container only. This means that the insecure key is installed at container boot. 
#If you docker stop and docker start the container, the insecure key will still be there, but if you use docker run to start a new container then that container will not contain the insecure key.
#
#Start a container with --enable-insecure-key:
#
#  docker run YOUR_IMAGE /sbin/my_init --enable-insecure-key
#
#Find out the ID of the container that you just ran:
#
#  docker ps
#
#Once you have the ID, look for its IP address with:
#
#  docker inspect -f "{{ .NetworkSettings.IPAddress }}" <ID>
#
#Now that you have the IP address, you can use SSH to login to the container, or to execute a command inside it:

###### Download the insecure private key
#
#  curl -o insecure_key -fSL https://github.com/phusion/baseimage-docker/raw/master/image/services/sshd/keys/insecure_key
#  chmod 600 insecure_key
#
#Login to the container
#
#  ssh -i insecure_key root@<IP address>
#
#Running a command inside the container
#
#  ssh -i insecure_key root@<IP address> echo hello world
#
#Enabling the insecure key permanently
#It is also possible to enable the insecure key in the image permanently. This is not generally recommended, 
#but is suitable for e.g. temporary development or demo environments where security does not matter.
#
#Edit your Dockerfile to install the insecure key permanently:
#
#  RUN /usr/sbin/enable_insecure_key
#
#Instructions for logging in the container is the same as in section Using the insecure key for one container only.


######Using your own key
#
#Edit your Dockerfile to install an SSH public key:
#
#Install an SSH of your choice.
#
#  ADD your_key.pub /tmp/your_key.pub
#  RUN cat /tmp/your_key.pub >> /root/.ssh/authorized_keys && rm -f /tmp/your_key.pub
#
#Then rebuild your image. Once you have that, start a container based on that image:
#
#  docker run your-image-name
#
#Find out the ID of the container that you just ran:
#
#  docker ps
#
#Once you have the ID, look for its IP address with:
#
#  docker inspect -f "{{ .NetworkSettings.IPAddress }}" <ID>
#
#Now that you have the IP address, you can use SSH to login to the container, or to execute a command inside it:

###### Login to the container
#
#  ssh -i /path-to/your_key root@<IP address>
#
#Running a command inside the container
#
#  ssh -i /path-to/your_key root@<IP address> echo hello world

######  The docker-ssh tool
#
#Looking up the IP of a container and running an SSH command quickly becomes tedious. 
#Luckily, we provide the docker-ssh tool which automates this process. 
#This tool is to be run on the Docker host, not inside a Docker container.
#
#First, install the tool on the Docker host:
#
#  curl --fail -L -O https://github.com/phusion/baseimage-docker/archive/master.tar.gz && \
#  tar xzf master.tar.gz && \
#  sudo ./baseimage-docker-master/install-tools.sh
#
#Then run the tool as follows to login to a container using SSH:
#
#  docker-ssh YOUR-CONTAINER-ID
#
#You can lookup YOUR-CONTAINER-ID by running docker ps.
#By default, docker-ssh will open a Bash session. You can also tell it to run a command, and then exit:
#
#  docker-ssh YOUR-CONTAINER-ID echo hello world


###### runit
#
#Used for service supervision and management. Much easier to use than SysV init and supports restarting daemons when they crash. Much easier to use and more lightweight than Upstart.

#Baseimage-docker encourages you to run multiple processes through the use of runit.
#Baseimage-docker encourages you to run multiple processes through the use of runit.
#
#You might be familiar with supervisord. Runit (written in C) is much lighter weight than supervisord (written in Python).

###### setuser
#
#A custom tool for running a command as another user. Easier to use than su, 
#has a smaller attack vector than sudo, 
#and unlike chpst this tool sets $HOME correctly. 
#Available as /sbin/setuser.
